# https://raw.githubusercontent.com/topology-gg/caistring/9980eb42a889beaf1ebadb21965a92471fcb1f92/contracts/Svg.cairo

%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.math import unsigned_div_rem
from starkware.cairo.common.alloc import alloc

from src.util.str import string, literal_from_number, str_from_literal, str_concat_array

#
# v0.1: support flat structure:
# <svg ...>
# [a bunch of <rect/> or <path/> that do not contain nested tags]
# </svg>
#

#
# short-term goal:
# build Svg library to recreate Wheelcards on StarkNet,
# where each attribute is a Svg instance stored in contract,
# and rollie svg is generated by combination of attributes in contract
#

#
# v0.2: support nested structure
#

#
# fixed-point number with 2 decimal points
#
struct NumFp2:
    member val : felt
end

struct TupleNumFp2:
    member x : NumFp2
    member y : NumFp2
end

struct SvgRect:
    member x : NumFp2
    member y : NumFp2
    member w : NumFp2
    member h : NumFp2
    member arr_attributes_len : felt
    member arr_attributes : SvgAttribute*
end

#
# TODO: gives resolution into constructing path.d
#
struct SvgPath:
    member d : string
    member arr_attributes_len : felt
    member arr_attributes : SvgAttribute*
end

struct SvgAttribute:
    member attribute : felt
    member value : felt
end

# type: rect, path, polygon, circle
# value: the pointer to the instance of struct cast to felt
struct SvgObj:
    member typ : felt
    member val : felt
end

###########################

func numfp2_from_felt{}(x : felt) -> (res : NumFp2):
    return (NumFp2(val=x * 100))
end

###########################

func return_svg_header{range_check_ptr}(w : felt, h : felt) -> (str : string):
    alloc_locals

    # Format:
    # <svg width="{w}" height="{h}" xmlns="http://www.w3.org/2000/svg">

    # literal/str_from_number only supports integer for now
    let (w_literal : felt) = literal_from_number(w)
    let (h_literal : felt) = literal_from_number(h)

    let (arr) = alloc()
    assert arr[0] = '<svg width="'
    assert arr[1] = w_literal
    assert arr[2] = '" height="'
    assert arr[3] = h_literal
    assert arr[4] = '" xmlns="http://www.w3.org/'
    assert arr[5] = '2000/svg">'

    return (string(6, arr))
end

func str_from_svg_rect{range_check_ptr}(svg_rect : SvgRect) -> (str : string):
    alloc_locals

    # Format:
    # <rect x="<x>" y="<y>" w="<w>" h="<h>" attribute_0="<attribute_0>" ... />

    let (x_rounded, _) = unsigned_div_rem(svg_rect.x.val, 100)
    let (y_rounded, _) = unsigned_div_rem(svg_rect.y.val, 100)
    let (w_rounded, _) = unsigned_div_rem(svg_rect.w.val, 100)
    let (h_rounded, _) = unsigned_div_rem(svg_rect.h.val, 100)

    let (x_literal) = literal_from_number(x_rounded)
    let (y_literal) = literal_from_number(y_rounded)
    let (w_literal) = literal_from_number(w_rounded)
    let (h_literal) = literal_from_number(h_rounded)

    let (arr) = alloc()
    assert arr[0] = '<rect x="'
    assert arr[1] = x_literal
    assert arr[2] = '" y="'
    assert arr[3] = y_literal
    assert arr[4] = '" w="'
    assert arr[5] = w_literal
    assert arr[6] = '" h="'
    assert arr[7] = h_literal
    assert arr[8] = '" stroke="'
    assert arr[9] = svg_rect.stroke
    assert arr[10] = '" fill="'
    assert arr[11] = svg_rect.fill
    assert arr[12] = '" />'

    return (string(13, arr))
end

#
# For testing purpose, generate a sweet lemoney circle in the center of a 300x300 canvas
#
func generate_character{range_check_ptr}() -> (svg_str : string):
    alloc_locals

    # On a canvas of 300 x 300,
    let (header_str : string) = return_svg_header(300, 300)

    let (x_fp2) = numfp2_from_felt(150)
    let (y_fp2) = numfp2_from_felt(150)
    let (wh_fp2) = numfp2_from_felt(50)

    let svg_rect = SvgRect(x=x_fp2, y=y_fp2, w=wh_fp2, h=wh_fp2, fill='#FCFC99')
    let (rect_str : string) = str_from_svg_rect(svg_rect)

    let (close_str : string) = str_from_literal('</svg>')

    let (arr_str : string*) = alloc()
    assert arr_str[0] = header_str
    assert arr_str[1] = rect_str
    assert arr_str[2] = close_str

    let (svg_str) = str_concat_array(3, arr_str)
    return (svg_str)
end
